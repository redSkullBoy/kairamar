// <auto-generated />
using System;
using DataAccess.PostgreSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.PostgreSQL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int?>("LastAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("last_address_id");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.Property<int>("UserType")
                        .HasColumnType("integer")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("LastAddressId")
                        .HasDatabaseName("ix_asp_net_users_last_address_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .HasColumnType("text")
                        .HasColumnName("area");

                    b.Property<string>("AreaFiasId")
                        .HasColumnType("text")
                        .HasColumnName("area_fias_id");

                    b.Property<string>("AreaKladrId")
                        .HasColumnType("text")
                        .HasColumnName("area_kladr_id");

                    b.Property<string>("AreaType")
                        .HasColumnType("text")
                        .HasColumnName("area_type");

                    b.Property<string>("AreaTypeFull")
                        .HasColumnType("text")
                        .HasColumnName("area_type_full");

                    b.Property<string>("AreaWithType")
                        .HasColumnType("text")
                        .HasColumnName("area_with_type");

                    b.Property<string>("BeltwayDistance")
                        .HasColumnType("text")
                        .HasColumnName("beltway_distance");

                    b.Property<string>("BeltwayHit")
                        .HasColumnType("text")
                        .HasColumnName("beltway_hit");

                    b.Property<string>("Block")
                        .HasColumnType("text")
                        .HasColumnName("block");

                    b.Property<string>("BlockType")
                        .HasColumnType("text")
                        .HasColumnName("block_type");

                    b.Property<string>("BlockTypeFull")
                        .HasColumnType("text")
                        .HasColumnName("block_type_full");

                    b.Property<string>("CapitalMarker")
                        .HasColumnType("text")
                        .HasColumnName("capital_marker");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("CityArea")
                        .HasColumnType("text")
                        .HasColumnName("city_area");

                    b.Property<string>("CityDistrictArea")
                        .HasColumnType("text")
                        .HasColumnName("city_district_area");

                    b.Property<string>("CityDistrictFiasId")
                        .HasColumnType("text")
                        .HasColumnName("city_district_fias_id");

                    b.Property<string>("CityDistrictKladrId")
                        .HasColumnType("text")
                        .HasColumnName("city_district_kladr_id");

                    b.Property<string>("CityDistrictType")
                        .HasColumnType("text")
                        .HasColumnName("city_district_type");

                    b.Property<string>("CityDistrictTypeFull")
                        .HasColumnType("text")
                        .HasColumnName("city_district_type_full");

                    b.Property<string>("CityDistrictWithType")
                        .HasColumnType("text")
                        .HasColumnName("city_district_with_type");

                    b.Property<string>("CityFiasId")
                        .HasColumnType("text")
                        .HasColumnName("city_fias_id");

                    b.Property<string>("CityKladrId")
                        .HasColumnType("text")
                        .HasColumnName("city_kladr_id");

                    b.Property<string>("CityType")
                        .HasColumnType("text")
                        .HasColumnName("city_type");

                    b.Property<string>("CityTypeFull")
                        .HasColumnType("text")
                        .HasColumnName("city_type_full");

                    b.Property<string>("CityWithType")
                        .HasColumnType("text")
                        .HasColumnName("city_with_type");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("CountryIsoCode")
                        .HasColumnType("text")
                        .HasColumnName("country_iso_code");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("FiasActualityState")
                        .HasColumnType("text")
                        .HasColumnName("fias_actuality_state");

                    b.Property<string>("FiasId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fias_id");

                    b.Property<int>("FiasLevel")
                        .HasColumnType("integer")
                        .HasColumnName("fias_level");

                    b.Property<string>("Flat")
                        .HasColumnType("text")
                        .HasColumnName("flat");

                    b.Property<string>("FlatArea")
                        .HasColumnType("text")
                        .HasColumnName("flat_area");

                    b.Property<string>("FlatPrice")
                        .HasColumnType("text")
                        .HasColumnName("flat_price");

                    b.Property<string>("FlatType")
                        .HasColumnType("text")
                        .HasColumnName("flat_type");

                    b.Property<string>("FlatTypeFull")
                        .HasColumnType("text")
                        .HasColumnName("flat_type_full");

                    b.Property<string>("GeoLat")
                        .HasColumnType("text")
                        .HasColumnName("geo_lat");

                    b.Property<string>("GeoLon")
                        .HasColumnType("text")
                        .HasColumnName("geo_lon");

                    b.Property<string>("House")
                        .HasColumnType("text")
                        .HasColumnName("house");

                    b.Property<string>("HouseFiasId")
                        .HasColumnType("text")
                        .HasColumnName("house_fias_id");

                    b.Property<string>("HouseKladrId")
                        .HasColumnType("text")
                        .HasColumnName("house_kladr_id");

                    b.Property<string>("HouseType")
                        .HasColumnType("text")
                        .HasColumnName("house_type");

                    b.Property<string>("HouseTypeFull")
                        .HasColumnType("text")
                        .HasColumnName("house_type_full");

                    b.Property<string>("KladrId")
                        .HasColumnType("text")
                        .HasColumnName("kladr_id");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Okato")
                        .HasColumnType("text")
                        .HasColumnName("okato");

                    b.Property<string>("Oktmo")
                        .HasColumnType("text")
                        .HasColumnName("oktmo");

                    b.Property<string>("PostalBox")
                        .HasColumnType("text")
                        .HasColumnName("postal_box");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("Qc")
                        .HasColumnType("text")
                        .HasColumnName("qc");

                    b.Property<string>("QcComplete")
                        .HasColumnType("text")
                        .HasColumnName("qc_complete");

                    b.Property<string>("QcGeo")
                        .HasColumnType("text")
                        .HasColumnName("qc_geo");

                    b.Property<string>("QcHouse")
                        .HasColumnType("text")
                        .HasColumnName("qc_house");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("RegionFiasId")
                        .HasColumnType("text")
                        .HasColumnName("region_fias_id");

                    b.Property<string>("RegionIsoCode")
                        .HasColumnType("text")
                        .HasColumnName("region_iso_code");

                    b.Property<string>("RegionKladrId")
                        .HasColumnType("text")
                        .HasColumnName("region_kladr_id");

                    b.Property<string>("RegionType")
                        .HasColumnType("text")
                        .HasColumnName("region_type");

                    b.Property<string>("RegionTypeFull")
                        .HasColumnType("text")
                        .HasColumnName("region_type_full");

                    b.Property<string>("RegionWithType")
                        .HasColumnType("text")
                        .HasColumnName("region_with_type");

                    b.Property<string>("Settlement")
                        .HasColumnType("text")
                        .HasColumnName("settlement");

                    b.Property<string>("SettlementFiasId")
                        .HasColumnType("text")
                        .HasColumnName("settlement_fias_id");

                    b.Property<string>("SettlementKladrId")
                        .HasColumnType("text")
                        .HasColumnName("settlement_kladr_id");

                    b.Property<string>("SettlementType")
                        .HasColumnType("text")
                        .HasColumnName("settlement_type");

                    b.Property<string>("SettlementTypeFull")
                        .HasColumnType("text")
                        .HasColumnName("settlement_type_full");

                    b.Property<string>("SettlementWithType")
                        .HasColumnType("text")
                        .HasColumnName("settlement_with_type");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("SquareMeterPrice")
                        .HasColumnType("text")
                        .HasColumnName("square_meter_price");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("StreetFiasId")
                        .HasColumnType("text")
                        .HasColumnName("street_fias_id");

                    b.Property<string>("StreetKladrId")
                        .HasColumnType("text")
                        .HasColumnName("street_kladr_id");

                    b.Property<string>("StreetType")
                        .HasColumnType("text")
                        .HasColumnName("street_type");

                    b.Property<string>("StreetTypeFull")
                        .HasColumnType("text")
                        .HasColumnName("street_type_full");

                    b.Property<string>("StreetWithType")
                        .HasColumnType("text")
                        .HasColumnName("street_with_type");

                    b.Property<string>("TaxOffice")
                        .HasColumnType("text")
                        .HasColumnName("tax_office");

                    b.Property<string>("TaxOfficeLegal")
                        .HasColumnType("text")
                        .HasColumnName("tax_office_legal");

                    b.Property<string>("Timezone")
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.Property<string>("UnparsedParts")
                        .HasColumnType("text")
                        .HasColumnName("unparsed_parts");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Model.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDateLocal")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date_local");

                    b.Property<int>("FromAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("from_address_id");

                    b.Property<string>("InitiatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("initiator_id");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("locale");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("RadiusInMeters")
                        .HasColumnType("integer")
                        .HasColumnName("radius_in_meters");

                    b.Property<int>("RequestedSeats")
                        .HasColumnType("integer")
                        .HasColumnName("requested_seats");

                    b.Property<DateTime>("StartDateLocal")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date_local");

                    b.Property<int>("ToAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("to_address_id");

                    b.HasKey("Id")
                        .HasName("pk_trips");

                    b.HasIndex("FromAddressId")
                        .HasDatabaseName("ix_trips_from_address_id");

                    b.HasIndex("InitiatorId")
                        .HasDatabaseName("ix_trips_initiator_id");

                    b.HasIndex("ToAddressId")
                        .HasDatabaseName("ix_trips_to_address_id");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Model.TripPassenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AmountSeats")
                        .HasColumnType("integer")
                        .HasColumnName("amount_seats");

                    b.Property<string>("PassengerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passenger_id");

                    b.Property<int>("TripId")
                        .HasColumnType("integer")
                        .HasColumnName("trip_id");

                    b.HasKey("Id")
                        .HasName("pk_trip_passengers");

                    b.HasIndex("PassengerId")
                        .HasDatabaseName("ix_trip_passengers_passenger_id");

                    b.HasIndex("TripId")
                        .IsUnique()
                        .HasDatabaseName("ix_trip_passengers_trip_id");

                    b.ToTable("trip_passengers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.HasOne("Domain.Entities.Model.Address", "LastAddress")
                        .WithMany()
                        .HasForeignKey("LastAddressId")
                        .HasConstraintName("fk_asp_net_users_addresses_last_address_id");

                    b.Navigation("LastAddress");
                });

            modelBuilder.Entity("Domain.Entities.Model.Trip", b =>
                {
                    b.HasOne("Domain.Entities.Model.Address", "FromAddress")
                        .WithMany()
                        .HasForeignKey("FromAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trips_addresses_from_address_id");

                    b.HasOne("Domain.Entities.AppUser", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trips_users_initiator_id");

                    b.HasOne("Domain.Entities.Model.Address", "ToAddress")
                        .WithMany()
                        .HasForeignKey("ToAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trips_addresses_to_address_id");

                    b.Navigation("FromAddress");

                    b.Navigation("Initiator");

                    b.Navigation("ToAddress");
                });

            modelBuilder.Entity("Domain.Entities.Model.TripPassenger", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_passengers_users_passenger_id");

                    b.HasOne("Domain.Entities.Model.Trip", null)
                        .WithOne("TripPassenger")
                        .HasForeignKey("Domain.Entities.Model.TripPassenger", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trip_passengers_trips_trip_id");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Domain.Entities.Model.Trip", b =>
                {
                    b.Navigation("TripPassenger");
                });
#pragma warning restore 612, 618
        }
    }
}
